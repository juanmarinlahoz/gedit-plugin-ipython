#!/usr/bin/env python
#-*- coding:utf-8 -*-

"""
gedit-plugin-ipython
Copyright 2012 Sebastiaan Mathot <s.mathot@cogsci.nl>

This file is part of gedit-plugin-ipython.

gedit-plugin-ipython is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

gedit-plugin-ipython is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with gedit-plugin-ipython.  If not, see <http://www.gnu.org/licenses/>.
"""

import sys
import socket
from threading import Thread
from IPython.frontend.terminal.embed import InteractiveShellEmbed
		
class IPythonListener(Thread):

	"""Continuously listens for incoming code to send to an IPython console"""

	def __init__(self, console):
	
		"""
		Constructor
		
		Arguments:
		console -- an IPython InteractiveShellEmbed instance		
		"""
				
		Thread.__init__(self)			
		self.port = 50007
		self.bufSize = 65536
		self.console = console		
		self.alive = True
		self.sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
		try:
			self.sock.bind(("", self.port))
		except:
			print 'Failed to start listening (port %d)' % self.port
			print 'Is another instance of ipython-listener already running?'
			sys.exit(1)
		
		self.sock.settimeout(.1)

	def run(self):
	
		"""Run the thread and listen until the console is closed"""

		while self.alive:				
			try:
				s, comm_addr = self.sock.recvfrom(self.bufSize)
				print s
				print self.console.prompt_manager.render('out')
				self.console.ex(s)
				print
			except Exception as e:
				if ('%s' % e) != 'timed out':
					print e
				
	def stop(self):
	
		"""Stop the listener"""
	
		self.alive = False	
		
if __name__ == '__main__':

	# Create a console, start the listener, and start the console
	console = InteractiveShellEmbed()
	listener = IPythonListener(console)
	listener.start() 
	console()
	listener.stop()

